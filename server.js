const WebSocket = require("ws");
const TradingStrategy = require("./strategy");

const wss = new WebSocket.Server({ port: 5001 });

let trades = [];
let tradingStats = {
    totalTrades: 0,
    profitableTrades: 0,
    lossTrades: 0
};

wss.on("connection", (ws) => {
    console.log("‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω");

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    async function sendTradingSignals() {
        try {
            const signals = await TradingStrategy.generateTradeSignals();

            signals.forEach(signal => {
                const tradeEntry = {
                    ...signal,
                    status: "OPEN",
                    openTime: new Date().toISOString()
                };

                trades.push(tradeEntry);
                tradingStats.totalTrades++;

                console.log("üìä –°–∏–≥–Ω–∞–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:", tradeEntry);
                ws.send(JSON.stringify(tradeEntry));
            });
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:", error);
        }
    }

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
    const signalInterval = setInterval(sendTradingSignals, 15 * 60 * 1000);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
    ws.on("message", (message) => {
        try {
            const data = JSON.parse(message);

            if (data.type === "CLOSE_TRADE") {
                const tradeIndex = trades.findIndex(t =>
                    t.symbol === data.symbol && t.status === "OPEN"
                );

                if (tradeIndex !== -1) {
                    trades[tradeIndex].status = "CLOSED";
                    trades[tradeIndex].closeTime = new Date().toISOString();
                    trades[tradeIndex].closePrice = data.closePrice;

                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    if (data.closePrice > trades[tradeIndex].entryPrice) {
                        tradingStats.profitableTrades++;
                    } else {
                        tradingStats.lossTrades++;
                    }

                    console.log("üèÅ –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞:", trades[tradeIndex]);
                    ws.send(JSON.stringify({
                        type: "TRADE_CLOSED",
                        trade: trades[tradeIndex],
                        stats: tradingStats
                    }));
                }
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    sendTradingSignals();

    ws.on("close", () => {
        console.log("‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
        clearInterval(signalInterval);
    });
});

console.log("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5001");